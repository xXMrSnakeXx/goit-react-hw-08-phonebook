{"version":3,"file":"static/js/133.e505e9a4.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsListItem/ContactsListItem.module.css?89f9","components/ContactsList/ContactsListItem/ContactsListItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"contactform\":\"ContactForm_contactform__1wuxY\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"btn\":\"ContactForm_btn__wll+u\"};","import { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport {\n  useGetContactsQuery,\n  useAddContactMutation,\n} from 'redux/contacts/contactsApi';\nimport Notiflix from 'notiflix';\n\nimport s from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const [form, setForm] = useState({ name: '', number: '' });\n  const { data: contacts } = useGetContactsQuery();\n  const [addContact, { isSuccess, isLoading }] = useAddContactMutation();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    setForm(prevForm => ({ ...prevForm, [name]: value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const data = { id: nanoid(), ...form };\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === data.name.toLowerCase()\n      )\n    ) {\n      formReset();\n      return alert(`Number: ${data.name} is already in phonebook`);\n    }\n    addContact(data);\n  };\n\n  const formReset = () => {\n    setForm({ name: '', number: '' });\n  };\n\n  useEffect(() => {\n    if (isSuccess) {\n      Notiflix.Notify.success(`Contact added!`);\n      formReset();\n    }\n  }, [isSuccess]);\n\n  const { name, number } = form;\n  return (\n    <div className={s.contactform}>\n      <form onSubmit={handleSubmit}>\n        <label className={s.label}>\n          Name\n          <input\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n        </label>\n        <label className={s.label}>\n          Number\n          <input\n            className={s.input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={s.btn} disabled={isLoading}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactsListItem_item__VnwkN\",\"btn\":\"ContactsListItem_btn__dqeuL\"};","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useDeleteContactMutation } from 'redux/contacts/contactsApi';\nimport Notiflix from 'notiflix';\n\nimport s from './ContactsListItem.module.css';\n\nexport const ContactsListItem = ({ id, name, number }) => {\n  const [contactsDelete, { isSuccess, isLoading }] = useDeleteContactMutation();\n\n  useEffect(() => {\n    if (isSuccess) {\n      Notiflix.Notify.info('Contact deleted');\n    }\n  }, [isSuccess]);\n\n  return (\n    <li id={id} className={s.item}>\n      {name}: {number}\n      <button\n        className={s.btn}\n        onClick={() => contactsDelete(id)}\n        disabled={isLoading}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\nContactsListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactsList_container__r+Txe\",\"loader\":\"ContactsList_loader__Wb5g0\",\"text\":\"ContactsList_text__URA4K\"};","import { useSelector } from 'react-redux';\nimport { useGetContactsQuery } from 'redux/contacts/contactsApi';\nimport { Rings } from 'react-loader-spinner';\n\nimport { ContactsListItem } from './ContactsListItem';\nimport s from './ContactsList.module.css';\n\nexport const ContactsList = () => {\n  const { data: contacts, isLoading, isSuccess } = useGetContactsQuery();\n  const filter = useSelector(state => state.filter);\n\n  const getVisibleContacts = () => {\n    if (filter === '') {\n      return contacts;\n    }\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const items = getVisibleContacts();\n  return (\n    <ul className={s.container}>\n      {isLoading && (\n        <div className={s.loader}>\n          <Rings height=\"200\" width=\"200\" color=\"#0031f9\" ariaLabel=\"loading\" />\n        </div>\n      )}\n      {isSuccess &&\n        items.map(({ id, name, number }) => (\n          <ContactsListItem key={id} id={id} name={name} number={number} />\n        ))}\n      {items && items.length === 0 && (\n        <span className={s.text}> No contacts </span>\n      )}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Filter_container__L5eml\",\"input\":\"Filter_input__N7T3z\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/contactsSlice';\n\nimport s from './Filter.module.css';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.contacts.filter);\n\n  const filterChange = e => {\n    dispatch(changeFilter(e.currentTarget.value));\n  };\n\n  return (\n    <div className={s.container}>\n      <h2>Find contacts by name</h2>\n      <input className={s.input} onChange={filterChange} value={filter}></input>\n    </div>\n  );\n};\n","import { ContactForm } from 'components/ContactForm';\nimport { ContactsList } from 'components/ContactsList';\nimport { Filter } from 'components/Filter';\n\nexport default function ContactsPage() {\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      <ContactsList />\n    </>\n  );\n}\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","name","number","form","setForm","contacts","useGetContactsQuery","data","useAddContactMutation","addContact","isSuccess","isLoading","handleChange","e","currentTarget","value","prevForm","formReset","useEffect","Notiflix","className","s","onSubmit","preventDefault","find","contact","toLowerCase","alert","type","pattern","title","required","onChange","disabled","ContactsListItem","useDeleteContactMutation","contactsDelete","onClick","ContactsList","filter","useSelector","state","items","includes","height","width","color","ariaLabel","map","length","Filter","dispatch","useDispatch","changeFilter","ContactsPage"],"sourceRoot":""}